import pandas as pd
import joblib
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import mlflow
import mlflow.sklearn
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Loading Dataset
df = pd.read_csv("telecom_churn.csv")

# EDA and Data Cleaning
df['Churn'].value_counts()
df.isnull().sum()

# Standarization
X = df.drop('Churn', axis=1)
y = df['Churn']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Classification
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Handling Imbalance dataset
oversampler = RandomOverSampler(random_state=42)
X_train_resampled, y_train_resampled = oversampler.fit_resample(X_train, y_train)


# Classification Model Manual Logging
with mlflow.start_run():
    mlflow.set_experiment('Customer EDA Churn Prediction')
    mlflow.set_tag("description", "Churn  EDA Classification in unbalanced dataset")
    
    model = LogisticRegression()
    model.fit(X_train_resampled, y_train_resampled)
    y_pred = model.predict(X_test)
    report = classification_report(y_test, y_pred)
    print(report)
    
    mlflow.sklearn.log_model(model, 'model')
    
    # Logging metrics
    mlflow.log_metrics({
        'accuracy': accuracy_score(y_test, y_pred),
        'precision': precision_score(y_test, y_pred),
        'recall': recall_score(y_test, y_pred),
        'f1_score': f1_score(y_test, y_pred)
    })
    
    # Saving the model artifact
    joblib.dump(model, 'model/prediction2.joblib')
    mlflow.log_artifact('model/prediction2.joblib')
    
    print('Model saved in run %s' % mlflow.active_run().info.run_uuid)
